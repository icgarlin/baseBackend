{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"type-graphql\"","webpack:///external \"mongoose\"","webpack:///external \"reflect-metadata\"","webpack:///(webpack)/buildin/harmony-module.js","webpack:///external \"graphql-upload\"","webpack:///./src/models/file/file.model.ts","webpack:///external \"dotenv\"","webpack:///./src/api/routes/utils/token.ts","webpack:///./src/api/routes/utils/register.ts","webpack:///./src/models/index.ts","webpack:///./src/models/audio/audio.model.ts","webpack:///./src/models/thndr/thndr.model.ts","webpack:///./src/models/user/user.model.ts","webpack:///external \"path\"","webpack:///external \"jsonwebtoken\"","webpack:///external \"express\"","webpack:///external \"apollo-server-express\"","webpack:///external \"bcryptjs\"","webpack:///external \"validator/lib/isEmail\"","webpack:///external \"uuid\"","webpack:///./src/api/index.ts","webpack:///./src/models/mixtape/mixtape.model.ts","webpack:///./src/config/index.ts","webpack:///./src/config/s3.ts","webpack:///external \"aws-sdk\"","webpack:///./src/config/jwt.ts","webpack:///./src/app/app.ts","webpack:///./src/api/routes/auth.routes.ts","webpack:///external \"body-parser\"","webpack:///external \"cors\"","webpack:///external \"http\"","webpack:///external \"debug\"","webpack:///./src/schema/comment.ts","webpack:///./src/schema/thndr.ts","webpack:///./src/schema/user.ts","webpack:///./src/resolvers/user.ts","webpack:///./src/resolvers/thndr.ts","webpack:///./src/server.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","originalModule","webpackPolyfill","children","fileSchema","mongoose","Schema","filename","type","String","required","mimetype","path","FileModel","model","jwt","createAccessJwt","userId","sign","process","env","JWT_SECRET","expiresIn","createRefreshJwt","username","date","Date","now","UserModel","login","password","res","findOne","err","user","status","send","comparePassword","isMatch","refreshToken","markModified","save","accessToken","_id","json","register","email","birth","$or","foundUser","message","Error","AudioModel","MixtapeModel","ThndrModel","audioSchema","title","track","hashtags","features","cover","timestamps","thndrSchema","text","fileIds","Types","ObjectId","ref","likesIds","isReposted","Boolean","default","reverb","reverberId","originalThndrId","commentIds","userSchema","unique","validate","isEmail","minlength","maxlength","role","bio","avatar","followerIds","followingIds","thndr","methods","candidatePassword","cb","bcrypt","compare","this","authRoutes","schema","mixtapeSchema","tracks","description","credits","s3","aws","config","update","signatureVersion","region","accessKeyId","AWSAccessKeyId","secretAccessKey","AWSSecretKey","S3","superSecret","SUPER_SECRET","expireIn","refreshExpireIn","express","app","bodyParser","cors","Router","use","options","urlencoded","extended","request","response","next","header","router","post","req","body","registerResponse","Comment","ObjectType","Field","ID","nullable","PageInfo","Reverb","Thndr","Int","ThndrConnection","User","GraphQLUpload","toCursorHash","string","Buffer","from","toString","UserResolver","Resolver","of","Mutation","returns","Arg","Ctx","Query","files","context","console","log","length","createReadStream","encoding","fileStream","upload","Bucket","Body","Key","id","uuidv1","extname","ContentType","ACL","promise","s3Upload","Location","file","push","cursor","limit","findById","meUser","cursorTime","match","createdAt","$lt","$in","aggregate","$addFields","$toString","$match","$sort","$limit","exec","thndrs","hasNextPage","edges","slice","pageInfo","endCursor","thndrCount","userList","find","users","updateOne","$push","followedUser","followingUser","$pull","thndrId","originalThndr","repost","reposterId","reverbedThndr","myReverb","remove","allReverbIds","updateMany","map","ThndrResolver","likesCount","repostsCount","http","debug","MONGO_DEV_URI","connect","useNewUrlParser","keepAlive","useUnifiedTopology","useCreateIndex","port","val","parseInt","isNaN","normalizePort","PORT","set","corsOptions","origin","credentials","main","buildSchema","resolvers","thndrResolvers","userResolvers","apolloServer","ApolloServer","engine","apiKey","APOLLO_KEY","playground","introspection","uploads","graphqlUploadExpress","maxFileSize","maxFiles","applyMiddleware","listen","server","createServer","on","addr","address"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 32);\n","module.exports = require(\"type-graphql\");","module.exports = require(\"mongoose\");","module.exports = require(\"reflect-metadata\");","module.exports = function(originalModule) {\n\tif (!originalModule.webpackPolyfill) {\n\t\tvar module = Object.create(originalModule);\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"exports\", {\n\t\t\tenumerable: true\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","module.exports = require(\"graphql-upload\");","import mongoose from 'mongoose';\n\n\nconst fileSchema = new mongoose.Schema({\n  filename: {\n    type: String,\n    required: [true, 'The filename is necessary'],\n  },\n  mimetype: {\n    type: String,\n    required: [true, 'The mimetype is necessary'],\n  },\n  path: {\n    type: String,\n    required: [true, 'The path is necessary'],\n  },\n});\n\nconst FileModel = mongoose.model('FileModel', fileSchema);\n\nmodule.exports = { FileModel };\n","module.exports = require(\"dotenv\");","const jwt = require('jsonwebtoken');\n\nexport const createAccessJwt = (userId: string) => {\n  return jwt.sign({ userId }, process.env.JWT_SECRET, {\n      expiresIn: '24h'\n  });\n\n}\n\n\nexport const createRefreshJwt = (username: string) => {\n  return jwt.sign({type: 'refresh', date: Date.now(), username},\n                                    process.env.JWT_SECRET, {expiresIn: '24h'});\n}\n","import { createAccessJwt, createRefreshJwt } from './token';\nimport { Response } from 'express';\nconst { UserModel } = require('../../../models/user/user.model');\n// const connect = require('../../../db/db');\n\n// Should function return any? \nexport const login = (username: string, password: string, res: Response): any => {\n      UserModel.findOne({username: username}, function(err: any, user: any) {\n\n        if (err) {\n            return res.status(400).send('There has been an error with accessing the database');\n            // return { status: 400, message: 'There has been an error with accessing the database' };\n        } else if (!user) {\n            return res.status(401).send('A user with this username does not exist');\n            // return { status: 401, message: 'A user with this username does not exist' };\n        }\n        user.comparePassword(password, function(err: any, isMatch: boolean) {\n            if (err) return res.status(400).send('There has been an error with accessing \"comparePassword\" ');\n            // if (err) return { status: 400, message: 'There has been an error with accessing \"comparePassword\" ' };\n            if (isMatch) {\n              const refreshToken = createRefreshJwt(username);\n              user.refreshToken = refreshToken;\n              user.markModified('refreshToken')\n              user.save();\n              const accessToken = createAccessJwt(user._id);\n              return res.status(200).json({user, accessToken});\n              // return { user, accessToken }\n            } else {\n                return res.status(401).send('Incorrect passowrd');\n                // return { status: '401', message: 'Incorrect password' }\n            }\n        });\n     }).catch((err: any) => {\n          return res.status(400).send(err);\n     });\n\n}\n\n\n\nexport const register = async (username: string, password: string, email: string, birth: string) => {\n\n    try {\n        const foundUser =  await UserModel.findOne({$or: [\n                                                        { username: username },\n                                                        { email: email }\n                                                 ]});\n\n        if (!foundUser) {\n          const user = new UserModel({\n                                          username: username,\n                                          password: password,\n                                          email: email,\n                                          birth: birth,\n                                          refreshToken: createRefreshJwt(username),\n                                    });\n          user.save();\n          const accessToken = createAccessJwt(user._id);\n          return { user, accessToken };\n        }\n        // checks if username/email is already in use\n        if (foundUser.username === username) return { status: '409', message: 'This username is already in use'};\n        if (foundUser.email === email) return { status: '409', message: 'This email is already in use'};\n\n    } catch (err) {\n\n        throw new Error(err);\n    }\n\n}\n","export {}; \nconst { FileModel } = require('./file/file.model');\nconst { AudioModel } = require('./audio/audio.model');\nconst { MixtapeModel } = require('./mixtape/mixtape.model');\nconst { ThndrModel } = require('./thndr/thndr.model');\nconst { UserModel } = require('./user/user.model');\n\nmodule.exports = { FileModel, AudioModel, MixtapeModel, ThndrModel, UserModel };\n","var mongoose = require('mongoose');\nvar Schema = mongoose.Schema;\n\n\n\nvar audioSchema = new Schema(\n {\n\n  userId: {\n    type: String,\n  },\n  title: {\n    type: String,\n    required: true,\n  },\n  track: {\n    type: String,\n  },\n  hashtags: [{\n    type: String, \n  }],\n  features: [{\n    type: String\n  }],\n  cover: {\n    type: String,\n  }\n },\n {\n   timestamps: true,\n }\n\n)\n\n\n\nmodule.exports = mongoose.model('AudioModel', audioSchema);\n","import mongoose from 'mongoose';\n\nconst thndrSchema = new mongoose.Schema(\n  {\n    text: {\n      type: String,\n      required: true,\n    },\n    fileIds: [{\n      type: mongoose.Schema.Types.ObjectId,\n      ref: 'File',\n      required: false,\n    }],\n    userId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: 'User',\n      required: true,\n    },\n    likesIds: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User' }],\n    isReposted: {\n      type: mongoose.Schema.Types.Boolean,\n      default: false,\n    },\n    reverb: [{\n      reverberId: {\n        type: mongoose.Schema.Types.ObjectId,\n        ref: 'User',\n      },\n      originalThndrId: {\n        type: mongoose.Schema.Types.ObjectId,\n        ref: 'Thndr',\n      },\n    }],\n    commentIds: [{\n      type: mongoose.Schema.Types.ObjectId,\n      ref: 'Comment',\n    }]\n  },\n  {\n    timestamps: true,\n  },\n);\n\nconst ThndrModel = mongoose.model('ThndrModel', thndrSchema, 'thndrmodels');\n\nmodule.exports = { ThndrModel }\n","import mongoose from 'mongoose';\n\nimport bcrypt from 'bcryptjs';\nimport isEmail from 'validator/lib/isEmail';\n\nconst userSchema = new mongoose.Schema({\n  username: {\n    type: String,\n    unique: true,\n    required: true,\n  },\n  email: {\n    type: String,\n    unique: true,\n    required: true,\n    validate: [isEmail, 'No valid email address provided.'],\n  },\n  password: {\n    type: String,\n    required: true,\n    minlength: 7,\n    maxlength: 60,\n  },\n  role: {\n    type: String,\n  },\n  name: {\n    type: String,\n  },\n  bio: {\n    type: String,\n    maxlength: 150,\n  },\n  birth: {\n    type: String,\n  },\n  avatar: { type: String },\n  cover: { type: String },\n  followerIds: [\n    { type: mongoose.Schema.Types.ObjectId, ref: 'User' },\n  ],\n  followingIds: [\n    { type: mongoose.Schema.Types.ObjectId, ref: 'User' },\n  ],\n  thndr: [\n    { type: mongoose.Schema.Types.ObjectId, ref: 'Thndr' },\n  ],\n  refreshToken: {\n    type: String,\n  }\n});\n\nuserSchema.methods.comparePassword = function(candidatePassword: string, cb: any) {\n    bcrypt.compare(candidatePassword, this.password, function(err: any, isMatch: boolean) {\n        if (err) return cb(err);\n        cb(null, isMatch);\n    });\n};\n\nconst UserModel = mongoose.model('UserModel', userSchema, 'users');\nmodule.exports = { UserModel };\n","module.exports = require(\"path\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"express\");","module.exports = require(\"apollo-server-express\");","module.exports = require(\"bcryptjs\");","module.exports = require(\"validator/lib/isEmail\");","module.exports = require(\"uuid\");","export const authRoutes = require('../api/routes/auth.routes');\n","export {};\nvar mongoose = require('mongoose');\nvar Schema = mongoose.Schema;\nconst AudioModel = require('../audio/audio.model').schema;\n\n\n\nvar mixtapeSchema = new Schema(\n {\n    title: {\n      type: String,\n    },\n    hashtags:[{\n        type: String\n    }],\n    userId: {\n      type: String,\n    },\n    tracks: [{\n      type: AudioModel\n    }],\n    cover: {\n      type: String,\n    },\n    description: {\n      type: String,\n    },\n    credits: {\n      type: String,\n    }\n },\n {\n   timestamps: true,\n }\n\n\n);\n\n\n\nconst MixtapeModel = mongoose.model('MixtapeModel', mixtapeSchema);\n\nmodule.exports = { MixtapeModel };\n","import AWS from 'aws-sdk';\nimport { Root, Args, Resolver, Mutation, Query, Field, Int } from 'type-graphql';\nimport { Upload } from '../types/Upload';\nconst { s3 } = require('./s3');\nconst { jwt } = require('./jwt');\n// let client = require('./elasticSearch');\n\n// const esClient = client;\nmodule.exports = { s3 };\n","const aws = require('aws-sdk');\nrequire('dotenv').config();\n\n\n\naws.config.update({\n  signatureVersion: 'v4',\n  region: 'us-east-2',\n  accessKeyId: process.env.AWSAccessKeyId,\n  secretAccessKey: process.env.AWSSecretKey,\n});\n\n\n\nconst s3 = new aws.S3();\n\n\nmodule.exports = { s3 };\n","module.exports = require(\"aws-sdk\");","require('dotenv').config();\n\n\nconst jwt = {\n              superSecret: process.env.SUPER_SECRET,\n              expireIn:  '24h', // 24 hours,\n              refreshExpireIn: '24h',\n            }\n\n\nmodule.exports = { jwt };\n","import { authRoutes } from '../api/';\nconst express = require('express')\nconst app = express()\nconst bodyParser = require('body-parser')\nconst cors = require('cors')\nvar path = require('path');\nconst PORT = 3001\nconst router = express.Router()\n\n\n\n\n// call use function to include cors and bodyparser dependencies\napp.use(cors())\napp.options('*', cors());\napp.use(bodyParser.json())\napp.use(bodyParser.urlencoded({ extended: false }));\n\n\napp.use(function(request: any, response: any, next: any) {\n    response.header(\"Access-Control-Allow-Origin\", \"*\");\n    response.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept, Authorization\")\n    next();\n});\n\n\napp.use('/', authRoutes);\n\n\nmodule.exports = app\n","import { Request, Response } from 'express';\nimport { login, register } from './utils/';\nconst express = require('express');\nconst router = express.Router();\n\nrouter.post('/login', async function(req: Request, res: Response) {\n\n    try {\n        const { username, password }  = req.body;\n        const loginResponse: Response = await login(username,password,res);\n\n    } catch(error) {\n        return res.status(400).send(error);\n    }\n\n});\n\n\nrouter.post('/register', async function(req: Request, res: Response) {\n          const { username, password, email, birth } = req.body;\n          const registerResponse = register(username,password,email,birth);\n          return res.send(registerResponse);\n});\n\n\n\nmodule.exports = router;\n","module.exports = require(\"body-parser\");","module.exports = require(\"cors\");","module.exports = require(\"http\");","module.exports = require(\"debug\");","import 'reflect-metadata';\nimport { ObjectType, Field, Int, ID } from 'type-graphql';\nimport { GraphQLUpload } from 'graphql-upload';\nimport { Upload } from '../types/Upload';\nimport { User } from './user';\n\n\n\n@ObjectType()\nexport class Comment {\n\n  @Field(type => ID, { nullable: true })\n  id: string;\n\n  @Field(type => String, {nullable: false})\n  text: string;\n\n  @Field(type => ID, { nullable: false})\n  userId: string;\n\n  @Field(type => ID, {nullable: true})\n  fileId: string;\n\n}\n","import 'reflect-metadata';\nimport { ObjectType, Field, Int, ID } from 'type-graphql';\nimport { GraphQLUpload } from 'graphql-upload';\nimport { Upload } from '../types/Upload';\nimport { User } from './user';\nimport { Comment } from './comment';\n\n\n\n@ObjectType()\nexport class PageInfo {\n\n  @Field(type => Boolean, {nullable: true})\n  hasNextPage: boolean;\n\n  @Field(type => String, { nullable: true })\n  endCursor: string;\n\n}\n\n@ObjectType()\nexport class Reverb {\n\n  @Field(type => ID)\n  reverberId: string;\n\n  @Field(type => ID)\n  originalThndrId: string;\n\n}\n\n@ObjectType()\nexport class Thndr {\n\n  @Field(type => ID)\n  id: string;\n\n  @Field(type => String)\n  text: string;\n\n  @Field(type => Date)\n  createdAt: Date;\n\n  @Field(type => ID)\n  userId: string;\n\n  @Field(type => [String], {nullable: true})\n  files: string[];\n\n  @Field(type => Int)\n  likesCount: number;\n\n  @Field(type => Boolean)\n  isLiked: boolean;\n\n  @Field(type => Boolean)\n  isRepostedByMe: boolean;\n\n  @Field(type => Boolean)\n  isReposted: boolean;\n\n  @Field(type => [Reverb])\n  reverb: Reverb[];\n\n  @Field(type => Int)\n  reverbCount: number;\n\n  @Field(type => [Comment])\n  comments: Comment[];\n\n  @Field(type => Int)\n  commentCount: number;\n\n}\n\n\n@ObjectType()\nexport class ThndrConnection {\n\n  @Field(type => [Thndr], { nullable: true })\n  edges: Thndr[]\n\n  @Field(type => PageInfo, { nullable: true })\n  pageInfo: PageInfo\n}\n","import 'reflect-metadata';\nimport { ObjectType, Field, ID, Int } from 'type-graphql';\nimport { Thndr } from './thndr';\nimport { GraphQLUpload } from 'graphql-upload';\nimport { Upload } from '../types/Upload';\n\n@ObjectType()\nexport class User {\n\n  @Field(type => ID, { nullable: true })\n  id: string;\n\n  @Field(type => String, { nullable: true })\n  username: string;\n\n  @Field(type => String, { nullable: true })\n  password: string;\n\n  @Field(type => String, { nullable: true })\n  email: string;\n\n  @Field(type => String, { nullable: true })\n  name: string;\n\n  @Field(type => String, { nullable: true })\n  role: string;\n\n  @Field(type => String, { nullable: true })\n  bio: string;\n\n  @Field(type => String, {nullable: true})\n  birth: string;\n\n  @Field(type => [Thndr], { nullable: true })\n  thndr: Thndr[];\n\n  @Field(type => GraphQLUpload, { nullable: true })\n  avatar: Upload;\n\n  @Field(type => GraphQLUpload, { nullable: true })\n  cover: Upload;\n\n  @Field(type => [ID], { nullable: true })\n  followerIds: string[];\n\n  @Field(type => [ID], { nullable: true })\n  followingIds: string[];\n\n\n  // @Field(type => Boolean, { nullable: true })\n  // isFollowThem: boolean;\n  //\n  // @Field(type => Boolean, { nullable: true })\n  // isFollowsMe: boolean;\n\n}\n","import \"reflect-metadata\";\nimport { models } from 'mongoose';\nimport { v1 as uuidv1 } from 'uuid';\nimport { Root, Arg, Args, Resolver, Mutation, Ctx, FieldResolver, ArgsType, Query, Field, Int, ResolverInterface, ID } from 'type-graphql';\nimport { Thndr, User, ThndrConnection } from '../schema';\nimport { GraphQLUpload } from 'graphql-upload';\nimport { Upload } from '../types/Upload';\nimport { UserArgs } from '../types/UserArgs';\nimport { ThndrInput } from '../types/ThndrInput';\nimport { Context } from '../types/context.interface';\nconst { s3 } = require('../config/');\nconst { UserModel, ThndrModel } = require('../models/');\nconst { FileModel } = require('../models/file/file.model');\nconst path = require('path');\n\n/*\n* why should we hash cursor? (figure this out)\n* cursor is hashed because it is a\n* Date object in mongoDB\n **/\n\n// to base64, so that the client application would not work with the date but with the string\nconst toCursorHash = (string: string) =>\n  string ? Buffer.from(string).toString('base64') : '';\n\n// from base64\nconst fromCursorHash = (string: string) =>\n  Buffer.from(string, 'base64').toString('ascii');\n\n@Resolver(of => User)\nexport class UserResolver {\n\n  // @Query(returns => Promise<User>)\n  // async me(\n  //   @Arg('id', type => ID) id: string,\n  // ) {\n  //   const me = await UserModel.findById(id);\n  //   return me;\n  // }\n\n  // Creates a Thndr post\n  // files ===> an array of type File containing images or videos of post\n  // text ===> a string that contains th e text of the post\n  @Mutation(returns => Thndr, {nullable: true})\n  async createThndrPost(\n     @Arg('text', () => String) text: string,\n     @Arg('files', () => [GraphQLUpload], {nullable: true}) files: Upload[],\n     // Cannot contain string in @Ctx()\n     @Ctx() context: Context,\n  ) {\n     try {\n          if (text) {\n              console.log('this is the context: ', context);\n              console.log('this is the text: ', text);\n              let fileIds: any[] = [];\n              console.log('the files: ', files);\n              if (files) {\n                 // For each file, upload it to AWS S3\n                 // Create a File Model for each file object\n                 for (let i=0; i<files.length; i++) {\n                   const { createReadStream, filename, mimetype, encoding } = await files[i];\n\n                   const fileStream = createReadStream();\n                   const s3Upload = await s3.upload({\n                                           Bucket: 'thndr-test-bucket',\n                                           Body: fileStream,\n                                           Key: `${context.user.id}/thndr/${uuidv1()}${path.extname(filename)}`,\n                                           ContentType: mimetype,\n                                           ACL: 'public-read',\n                                         }).promise();\n\n                  console.log('the upload: ', s3Upload.Location);\n\n\n                 const file = await FileModel.create({\n                                 filename: filename,\n                                 mimetype: mimetype,\n                                 path: s3Upload.Location,\n                               });\n\n                 file.save();\n                 fileIds.push(file._id);\n\n\n\n                 }\n              }\n              console.log('the fileIds ', fileIds);\n\n              const user = await UserModel.findOne({_id: context.user.id});\n              let thndr;\n              if (user) {\n                thndr = await ThndrModel.create({\n                                            text: text,\n                                            fileIds: (files) ? fileIds: null,\n                                            userId: context.user.id,\n                                          });\n                thndr.save();\n                user.thndr.push(thndr._id);\n\n              }\n              return thndr;\n\n          }\n    } catch (err) {\n\n       console.log(err);\n    }\n  }\n\n  // Queries for a users feed\n  // includes all Thndr from the owners\n  // followed users and the owner's Thndr\n  @Query(returns => ThndrConnection)\n  async thndrs(\n      @Arg('cursor', type => String) cursor: string,\n      @Arg('limit', type => Int) limit: number,\n      @Ctx() context: Context,\n  ) {\n        const foundUser = context.user\n          ? await UserModel.findOne({\n              username: context.user.username,\n            })\n          : null;\n\n        const meUser = context.user ? await UserModel.findById(foundUser.id) : null;\n\n        const cursorTime = cursor\n          ? new Date(fromCursorHash(cursor)) //.toISOString()\n          : null;\n\n\n        const match = {\n          // no cursor is needed for the first query\n          ...(cursorTime && {\n            createdAt: {\n              $lt: cursorTime, //MORA NEW DATE(), sa toISOString ne radi\n            },\n          }),\n          // timeline, see thndrs only from following and me\n          ...(!!meUser &&\n            !context.user.username && {\n              $or: [\n                {\n                  'thndr.userId': {\n                    $in: [...meUser.followingIds, meUser._id],\n                  },\n                },\n                {\n                  'reposts.reposterId': {\n                    $in: [...meUser.followingIds, meUser._id],\n                  },\n                },\n              ],\n            })\n          // ...(!meUser && !context.user.username && {}), //timeline for non loged user, all tweets\n        };\n\n\n        console.log(match);\n\n        const thndrs = await ThndrModel.aggregate([\n          {\n            $addFields: {\n              id: { $toString: '$_id' },\n            },\n          },\n          { $match: match },\n          {\n            $sort: {\n              createdAt: -1,\n            },\n          },\n          {\n            $limit: limit + 1,\n          },\n        ]).exec();\n\n        console.log(thndrs);\n\n        const hasNextPage = thndrs.length > limit;\n        const edges = hasNextPage ? thndrs.slice(0, -1) : thndrs;\n\n        console.log('the edges: ', edges);\n        return {\n          edges,\n          pageInfo: {\n            hasNextPage,\n            endCursor: toCursorHash(\n              edges[edges.length - 1]?.createdAt?.toString(),\n            ),\n          },\n        };\n\n\n  }\n\n  // Queries for a single user by ID\n  @Query(() => User, {name: 'userById'})\n  async userById(\n    @Arg('id', type => ID) id: string\n  ) {\n      return await UserModel.findById(id);\n  }\n\n\n  // Can query for a single user by :\n  // - username\n  // - email\n  // - role\n  // - name\n  // - birth\n  //    OR\n  // - # of followers and following\n  @Query(() => User, { name: 'findUser' })\n  async user(\n    @Args() { username, email,\n              role, name, bio,\n              birth }: UserArgs\n  ) {\n\n      return await UserModel.findOne({ username, birth,\n                                       email, role,\n                                       name, bio });\n\n  }\n\n\n  // Queries for multiple Users\n  // Users must match each of the\n  // parameters\n  // - role: string\n  // - name: string\n  // - bio: string\n  // - thndrCount: number\n  @Query(() => [User])\n  async users(\n    @Args() { role, name, bio,\n              thndrCount }: UserArgs\n   ) {\n        // Should this.user be set here?\n        // Should i only return a single User?\n         let userList: User[] = [];\n         await UserModel.find({ role,\n                                name, bio, thndrCount },\n                                function (err: any, users: any) {\n                                  if (err) {\n\n                                    console.log('An error occurred: ', err);\n                                    return err;\n\n                                  }\n                                  userList = users;\n                              });\n\n\n         return userList;\n   }\n\n   // Follow another user\n   // username ==> username of the user to be followed\n   // user ===> the context variable has the user\n   // object stored in the 'req' variable\n   @Mutation(() => Boolean, {nullable: true})\n   async followUser(\n     // The user to be followed\n     @Arg('id', type => ID) id: string,\n     // The current user\n     @Ctx() context: Context\n   ) {\n\n     if (id === context.user.id) return false;\n     try {\n\n      const followedUser = await UserModel.updateOne(\n                                                    { _id: id },\n                                                    { $push: {\n                                                        followerIds: context.user.id\n                                                      }\n                                                    },\n\n                                                   );\n\n      console.log('followedUser: ', followedUser);\n      if (followedUser.n == 0) return false;\n\n      const followingUser = await UserModel.updateOne(\n                                                       { _id: context.user.id },\n                                                       { $push: {\n                                                            followingIds: id\n                                                         }\n                                                       },\n                                                     );\n\n      console.log('followingUser: ', followingUser);\n      return !!followingUser;\n\n    } catch(e) {\n\n        console.log('the error: ', e);\n    }\n\n   }\n\n\n   // Unfollow a user\n   // username ==> username of the user to be unfollowed\n   // user ===> the context variable has the user\n   // object stored in the 'req' variable\n   @Mutation(() => Boolean, {nullable: true})\n   async unfollowUser(\n     // The user to be unfollowed\n     @Arg('id', type => ID) id: string,\n     // The current user\n     @Ctx() context: Context\n   ) {\n\n     if (id === context.user.id) return false;\n     try {\n\n      const unfollowedUser = await UserModel.updateOne(\n                                                        { _id: id },\n                                                        { $pull: {\n                                                            followerIds: context.user.id\n                                                          }\n                                                        },\n                                                      );\n\n      if (unfollowedUser.n === 0) return false;\n      const followingUser = await UserModel.updateOne(\n                                                       { _id: context.user.id },\n                                                       { $pull: {\n                                                            followingIds: id\n                                                         }\n                                                       },\n                                                     );\n\n\n\n      return !!followingUser;\n\n    } catch(e) {\n\n        console.log('the error: ', e);\n    }\n\n   }\n\n\n   // Reverb Thndr\n   // reverb === repost\n   @Mutation(returns => Boolean)\n   async reverbThndr(\n     @Arg('thndrId', type => ID) thndrId: string,\n     @Ctx() context: Context\n\n   ) {\n     const originalThndr = await ThndrModel.findById(thndrId);\n     let thndr = originalThndr;\n\n     if (!thndr) return false;\n\n\n     if (originalThndr.isReposted) {\n      thndr = await ThndrModel.findById(thndr.reverb.originalThndrId);\n     }\n\n\n     const reverbedThndr = await ThndrModel.create({\n                                                      fileIds: thndr.fileIds,\n                                                      userId: thndr.userId,\n                                                      likesIds: thndr.likesIds,\n                                                      isReposted: true,\n                                                      repost: {\n                                                        reposterId: context.user.id,\n                                                        originalThndrId: thndr.id,\n                                                      },\n                                                  });\n     // Check if redundant i.e. does Model.create() save?\n     reverbedThndr.save();\n\n     console.log('the reverbed thndr: ', reverbedThndr);\n     return !!reverbedThndr;\n\n   }\n\n   // Unreverb Thndr\n   // reverb === repost\n   @Mutation(returns => Boolean)\n   async unreverbThndr(\n     @Arg('id', type => ID) id: string,\n     @Ctx() context: Context\n\n   ) {\n           const originalThndr = await ThndrModel.findById(id);\n\n           const myReverb = await ThndrModel.findOne({\n             'reverb.originalThndrId': originalThndr.id,\n             'reverb.reverberId': context.user.id,\n           });\n\n           if (myReverb) {\n             await myReverb.remove();\n             return true;\n           } else {\n               const thndr = await ThndrModel.findById(\n                 originalThndr.reverb.originalThndrId,\n               );\n               await thndr.remove();\n               return true;\n             }\n\n           return false;\n\n   }\n\n\n   /* TODO: Decide how comments are going to be stored\n    * does an entirely new schema need to be created?\n    *\n    *\n    **/\n   // @Field(returns => [Comment], {nullable: true})\n   // async getThndrComments(\n   //   @Arg('thndrId', type => ID) thndrId: string;\n   // ) {\n   //   if (!thndrId) return null;\n   //   const thndr = await Thndr.findById(thndrId);\n   //   if (!thndr) return null;\n   //\n   //   return thndr.comments;\n   // }\n\n   // Like Thndr post\n   //\n   @Mutation(returns => Boolean)\n   async likeThndr(\n     @Arg('id', type => ID) id: string,\n     @Ctx() context: Context,\n   ) {\n\n     const originalThndr = await ThndrModel.findById(id);\n     let thndr = originalThndr;\n\n     if (!thndr) return false;\n\n\n     if (originalThndr.isReposted) {\n      thndr = await ThndrModel.findById(thndr.reverb.originalThndrId);\n     }\n\n\n     const allReverbIds = await ThndrModel.find(\n                                {\n                                  'reverb.originalThndrId': thndr.id,\n                                },\n                                '_id',\n                              );\n                              await ThndrModel.updateMany(\n                                {\n                                  _id: {\n                                    $in: [\n                                      ...allReverbIds.map((i: any) => i._id),\n                                      thndr.id,\n                                    ],\n                                  },\n                                },\n                                { $push: { likesIds: context.user.id } },\n                              );\n\n      if (!allReverbIds) return false;\n\n      return !!originalThndr\n\n   }\n\n   // Unlike a Thndr post\n   @Mutation(returns => Boolean)\n   async unlikeThndr(\n     @Arg('id', type => ID) id: string,\n     @Ctx() context: Context,\n   ) {\n     const originalThndr = await ThndrModel.findById(id);\n     let thndr = originalThndr;\n\n     if (!thndr) return false;\n\n\n     if (originalThndr.isReposted) {\n      thndr = await ThndrModel.findById(thndr.reverb.originalThndrId);\n     }\n\n\n     const allReverbIds = await ThndrModel.find(\n                                {\n                                  'reverb.originalThndrId': thndr.id,\n                                },\n                                '_id',\n                              );\n                              await ThndrModel.updateMany(\n                                {\n                                  _id: {\n                                    $in: [\n                                      ...allReverbIds.map((i: any) => i._id),\n                                      thndr.id,\n                                    ],\n                                  },\n                                },\n                                { $pull: { likesIds: context.user.id } },\n                              );\n\n      if (!allReverbIds) return false;\n\n      return !!originalThndr\n\n\n   }\n\n   // @Mutation(returns => User)\n   // async updateUser(\n   //   @Arg('name', type => String, {nullable: true}) name: string,\n   //   @Arg('avatar', type => GraphQLUpload, { nullable:true }) avatar: Upload,\n   //   @Arg('cover', type => GraphQLUpload, { nullable:true }) cover: Upload,\n   //   @Arg('bio', type => String, {nullable: true}) bio: string,\n   //   @Ctx() context: Context\n   // ) {\n   //\n   // }\n\n   // Search through all\n   // models ==> Users and mixtapes (thndr?)\n   // mixtapes models can be an album, mixtape,\n   // or playlist\n   // @Mutation()\n   // async search(\n   //   @Arg('query') query: string,\n   // ) {\n   //\n   // }\n\n\n\n\n\n\n}\n","import 'reflect-metadata';\nimport { models } from 'mongoose';\nimport { v1 as uuidv1 } from 'uuid';\nimport { Root, Arg, Args, Resolver, Query, Mutation, ArgsType, ObjectType, Field } from 'type-graphql';\nimport { Thndr, User } from '../schema';\nimport { ThndrArgs } from \"../types/ThndrArgs\";\nimport { Upload } from '../types/Upload';\nimport { ThndrInput } from '../types/ThndrInput';\nconst { ThndrModel } = require('../models/thndr/thndr.model');\nconst { FileModel } = require('../models/file/file.model');\n\n\n// User is always queried before thndr\n// User type is the root\n@Resolver(User)\nexport class ThndrResolver {\n\n   // Retrieves Thndr(s) that match the\n   // query variable values\n   @Query(returns => Thndr)\n   async thndr(\n     @Args() {\n       text, createdAt, userId,\n       likesCount, repostsCount,\n     }: ThndrArgs\n   ) {\n    try {\n\n      const thndr = await ThndrModel.find({ text, createdAt, userId,\n                                        likesCount, repostsCount,\n                                   });\n      return thndr;\n\n    } catch (error) {\n\n        console.log('The error: ', error);\n        throw new Error(error);\n    }\n   }\n\n\n}\n","import 'reflect-metadata';\nimport { Request } from 'express';\nimport { ApolloServer } from 'apollo-server-express';\nimport { graphqlUploadExpress } from 'graphql-upload';\nimport { buildSchema } from 'type-graphql';\nconst { UserModel } = require('./models/');\nimport { userResolvers, thndrResolvers } from './resolvers';\nconst jwt = require('jsonwebtoken');\nimport expressJwt from \"express-jwt\";\nvar app = require('./app/app')\nvar http = require('http')\nvar debug = require('debug')\n\nrequire('dotenv').config();\n\nconst mongoose = require('mongoose');\nconsole.log(process.env.MONGO_DEV_URI);\nmongoose.connect(process.env.MONGO_DEV_URI, {\n  useNewUrlParser: true,\n  keepAlive: true,\n  useUnifiedTopology: true,\n  useCreateIndex: true\n}).catch((err: any) => {\n    throw new Error(err);\n});\n\nvar port = normalizePort(process.env.PORT || '3001');\napp.set('port', port);\n\n\nconst corsOptions = {\n    origin: '*',\n    credentials: true,\n}\n\nconst findUser = async (token: string) => {\n\n  if (token === '') return null;\n  let authorization = token.split(' ')[1];\n  console.log('token.split(\" \")[1] ', authorization);\n  try {\n    const decoded = jwt.verify(authorization,process.env.JWT_SECRET);\n    let userId = decoded.id;\n    const user = await UserModel.findOne({_id: userId});\n    return user;\n  } catch (err) {\n      console.log(err);\n  }\n\n}\n\nconst main = async () => {\n\n  const schema = await buildSchema({\n    resolvers: [thndrResolvers, userResolvers],\n  });\n\n  const apolloServer = new ApolloServer({\n                                          schema,\n                                          engine: {\n                                            apiKey: process.env.APOLLO_KEY,\n\n                                          },\n                                          playground: true,\n                                          introspection: true,\n                                          context: async (req: Request) => {\n                                            // const token = req.header.authorization || '';\n                                            // return findUser(token);\n                                          },\n                                          uploads: false,\n                                        });\n\n\n  // Mount a jwt or other authentication middleware that is run before the GraphQL execution\n  // app.use(\n  //   'http://localhost:4000',\n  //   expressJwt({\n  //     secret: \"TypeGraphQL\",\n  //     credentialsRequired: false,\n  //   }),\n  // );\n\n  app.use(graphqlUploadExpress({ maxFileSize: 100000000, maxFiles: 4 }));\n  apolloServer.applyMiddleware({ app, cors: corsOptions });\n  app.listen(4000, () => {\n    console.log(`ApolloServer running on port 4000`);\n  });\n\n}\n\n/**\n * Create HTTP server.\n */\n\nvar server = http.createServer(app);\n\n\n/**\n * Event listener for HTTP server \"listening\" event.\n */\n\n\n\n /**\n  * Normalize a port into a string, or false.\n  */\n\n function normalizePort(val: string) {\n   var port = parseInt(val, 10);\n\n   if (isNaN(port)) {\n     // named pipe\n     return val;\n   }\n\n   if (port >= 0) {\n     // port number\n     return port;\n   }\n\n   return false;\n }\n\n\nfunction onListening() {\n  var addr = server.address();\n  var bind = typeof addr === 'string'\n    ? 'pipe ' + addr\n    : 'port ' + addr.port;\n  debug('Listening on ' + bind);\n}\n/**\n * Listen on provided port, on all network interfaces.\n */\n\nserver.listen(port);\nserver.on('listening', onListening);\nmain();\n"],"sourceRoot":""}